include:
  project: TankerHQ/gitlab-ci-files
  file: /common.yml
  ref: 2023-08-07-265

variables:
  SDK_NATIVE_CONAN_REFERENCE: tanker/latest-stable@

############
# Workflow #
############

workflow:
  rules:
    # web pipelines for releases only
    - if: $CI_PIPELINE_SOURCE == "web" && $SDK_PYTHON_RELEASE_VERSION !~ /\A\d+\.\d+\.\d+(\.(a|b)\d+)?\z/
      when: never
    - if: !reference [.if-invalid-native-conan-reference, if]
      when: never
    - if: '$CI_MERGE_REQUEST_TITLE =~ /.*\[preview].*/'
      variables:
        CONAN_REMOTE: "artifactory-preview"
    - when: always
      variables:
        CONAN_REMOTE: "artifactory"
        PYENV_VERSION: "3.11"

###########
# Default #
###########

default:
  before_script:
    - poetry -V
    - poetry run python -m pip install --upgrade pip
    - poetry install --no-root
    - poetry run python --version
  image: registry.gitlab.com/tankerhq/docker/native:latest

##########
# Stages #
##########

stages:
  - check
  - build-wheel
  - deploy

#################
# Extend blocks #
#################

.coverage:
  artifacts:
    paths:
      - coverage
    expire_in: 7 days

.rules/deployed-native:
  rules:
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/mr/manual, rules]

#############################
# Default settings override #
#############################

.before-script/download-artifacts:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install --no-root
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME

###############
# check stage #
###############

lint:
  stage: check
  rules:
    - !reference [.rules/mr/auto, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/push-master-or-feat, rules]
  script:
    - ./lint.sh
  tags: !reference [.tags/linux, tags]

## deployed native

check/deployed-native/linux:
  stage: check
  extends:
    - .coverage
    - .rules/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --profile linux-x86_64 --remote $CONAN_REMOTE --tanker-ref=$SDK_NATIVE_CONAN_REFERENCE
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/linux, tags]

check/deployed-native/macos/x86_64:
  stage: check
  extends:
    - .coverage
    - .rules/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --profile macos-x86_64 --remote $CONAN_REMOTE --tanker-ref=$SDK_NATIVE_CONAN_REFERENCE
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/macos/x86_64, tags]

check/deployed-native/macos/arm:
  stage: check
  extends:
    - .coverage
    - .rules/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --use-tanker=deployed --profile macos-armv8 --remote $CONAN_REMOTE --tanker-ref=$SDK_NATIVE_CONAN_REFERENCE
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/macos/arm, tags]

## native from sources

check/native-from-sources/linux:
  stage: check
  extends:
    - .coverage
    - .rules/native-from-sources
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --remote $CONAN_REMOTE --use-tanker=same-as-branch --profile linux-x86_64
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/compilation-linux, tags]

check/native-from-sources/macos/x86_64:
  stage: check
  extends:
    - .coverage
    - .rules/native-from-sources
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --remote $CONAN_REMOTE --use-tanker=same-as-branch --profile macos-x86_64
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/macos/x86_64, tags]

check/native-from-sources/macos/arm:
  stage: check
  extends:
    - .coverage
    - .rules/native-from-sources
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --remote $CONAN_REMOTE --use-tanker=same-as-branch --profile macos-armv8
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/macos/arm, tags]

## downstream

check/downstream/linux:
  stage: check
  extends:
    - .before-script/download-artifacts
    - .rules/check/downstream/linux
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --remote $CONAN_REMOTE --use-tanker=upstream --profile linux-x86_64
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/linux, tags]

check/downstream/macos/x86_64:
  stage: check
  extends:
    - .before-script/download-artifacts
    - .rules/check/downstream/macos/x86_64
  dependencies: []
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --remote $CONAN_REMOTE --use-tanker=upstream --profile macos-x86_64
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/macos/x86_64, tags]

check/downstream/macos/arm:
  stage: check
  extends:
    - .before-script/download-artifacts
    - .rules/check/downstream/macos/arm
  dependencies: []
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --remote $CONAN_REMOTE --use-tanker=upstream --profile macos-armv8
    - poetry run python run-ci.py build --test
  tags: !reference [.tags/macos/arm, tags]

.safety:
  stage: check
  before_script:
    - poetry -V
    # poetry does not remove deps that aren't necessary anymore, that leads to
    # false positive on safety's side
    - poetry env remove $(which python3) || true
    - poetry run python -m pip install --upgrade pip
    - poetry install --no-root
    - poetry run python --version
  script:
    - poetry run safety check --full-report
  tags: !reference [.tags/linux, tags]

safety:
  extends:
    - .rules/nightly
    - .safety

safety/manual:
  extends:
    - .rules/mr/manual
    - .safety

#####################
# build-wheel stage #
#####################

.rules/build-wheel:
  rules:
    - !reference [.rules/valid-python-release-version, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/deploy-pipeline, rules]

.job/build-wheel:
  stage: build-wheel
  extends:
    - .rules/build-wheel
  script:
    - poetry run python run-ci.py --isolate-conan-user-home prepare --remote $CONAN_REMOTE --use-tanker=deployed --tanker-ref $SDK_NATIVE_CONAN_REFERENCE --profile $CONAN_PROFILE
    - poetry run python run-ci.py build --release $SDK_PYTHON_RELEASE_VERSION
  artifacts:
    paths:
      - dist

build-wheel/linux:
  extends:
    - .job/build-wheel
  variables:
    CONAN_PROFILE: linux-x86_64
  tags: !reference [.tags/linux, tags]

build-wheel/macos/x86_64:
  extends:
    - .job/build-wheel
  variables:
    CONAN_PROFILE: macos-x86_64
  tags: !reference [.tags/macos/x86_64, tags]

build-wheel/macos/arm:
  extends:
    - .job/build-wheel
  variables:
    CONAN_PROFILE: macos-armv8
  tags: !reference [.tags/macos/arm, tags]

################
# deploy stage #
################

deploy:
  stage: deploy
  extends:
    - .rules/deploy/python
  script:
    - poetry run python run-ci.py deploy
  needs:
    - build-wheel/linux
    - build-wheel/macos/x86_64
    - build-wheel/macos/arm
  release:
    description: sdk-python v$SDK_PYTHON_RELEASE_VERSION
    tag_name: v$SDK_PYTHON_RELEASE_VERSION
  tags: !reference [.tags/linux, tags]

pages:
  stage: deploy
  extends:
    - .rules/push-master-or-feat
  needs:
    - check/native-from-sources/linux
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 7 days
  tags: !reference [.tags/linux, tags]
