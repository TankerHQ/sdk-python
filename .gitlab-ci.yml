include:
  project: TankerHQ/gitlab-ci-files
  ref: 2021-10-08-203
  file: /common.yml

############
# Workflow #
############

workflow:
  rules:
    # web pipelines for releases only
    - if: $CI_PIPELINE_SOURCE == "web" && $SDK_PYTHON_RELEASE_VERSION !~ /\A\d+\.\d+\.\d+((a|b)\d+)?\z/
      when: never
    - if: !reference [.if-invalid-native-conan-reference, if]
      when: never
    # allow everything else
    - when: always

###########
# Default #
###########

default:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install --no-root
  image: registry.gitlab.com/tankerhq/docker/sdk-python:latest

##########
# Stages #
##########

stages:
  - check
  - build-wheel
  - deploy

#################
# Extend blocks #
#################

.coverage:
  artifacts:
    paths:
      - coverage
    expire_in: 7 days

.rules/deployed-native:
  rules:
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/mr/manual, rules]

.check/deployed-native/linux:
  stage: check
  extends:
    - .tags/linux
    - .coverage
    - .rules/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=deployed --profile linux-release --tanker-ref=$SDK_NATIVE_LATEST_CONAN_REFERENCE

.check/deployed-native/macos/x86_64:
  stage: check
  extends:
    - .tags/macos/x86_64
    - .coverage
    - .rules/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=deployed --profile macos-x86_64-release --tanker-ref=$SDK_NATIVE_LATEST_CONAN_REFERENCE

.check/deployed-native/macos/arm:
  stage: check
  extends:
    - .tags/macos/arm
    - .coverage
    - .rules/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=deployed --profile macos-armv8-release --tanker-ref=$SDK_NATIVE_LATEST_CONAN_REFERENCE

.check/native-from-sources/linux:
  stage: check
  extends:
    - .tags/linux
    - .coverage
    - .rules/native-from-sources
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=same-as-branch --profile linux-release

.check/native-from-sources/macos/x86_64:
  stage: check
  extends:
    - .tags/macos/x86_64
    - .coverage
    - .rules/native-from-sources
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=same-as-branch --profile macos-x86_64-release

.check/native-from-sources/macos/arm:
  stage: check
  extends:
    - .tags/macos/arm
    - .coverage
    - .rules/native-from-sources
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=same-as-branch --profile macos-armv8-release

.check/downstream/linux:
  stage: check
  extends:
    - .tags/linux
    - .before-script/download-artifacts
    - .rules/check/downstream/linux
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=upstream --profile linux-release

.check/downstream/macos/x86_64:
  stage: check
  extends:
    - .tags/macos/x86_64
    - .before-script/download-artifacts
    - .rules/check/downstream/macos/x86_64
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=upstream --profile macos-x86_64-release

.check/downstream/macos/arm:
  stage: check
  extends:
    - .tags/macos/arm
    - .before-script/download-artifacts
    - .rules/check/downstream/macos/arm
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=upstream --profile macos-armv8-release

#############################
# Default settings override #
#############################

.before-script/download-artifacts:
  before_script:
    - poetry run python -m pip install --upgrade pip
    - poetry install --no-root
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py reset-branch $(cat branch_name.txt)
    - poetry run python -m pip install --upgrade pip
    - poetry install --no-root

###############
# check stage #
###############

lint:
  stage: check
  extends:
    - .tags/linux
  rules:
    - !reference [.rules/mr/auto, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/push-master-or-feat, rules]
  script:
    - ./lint.sh

## deployed native

check/deployed-native/linux/3.7:
  extends: .check/deployed-native/linux
  variables:
     PYENV_VERSION: 3.7.10

check/deployed-native/linux/3.8:
  extends: .check/deployed-native/linux
  variables:
     PYENV_VERSION: 3.8.10

check/deployed-native/linux/3.9:
  extends: .check/deployed-native/linux
  variables:
     PYENV_VERSION: 3.9.5

check/deployed-native/macos/x86_64/3.7:
  extends: .check/deployed-native/macos/x86_64
  variables:
     PYENV_VERSION: 3.7.9

check/deployed-native/macos/x86_64/3.8:
  extends: .check/deployed-native/macos/x86_64
  variables:
     PYENV_VERSION: 3.8.6

check/deployed-native/macos/x86_64/3.9:
  extends: .check/deployed-native/macos/x86_64
  variables:
     PYENV_VERSION: 3.9.0

check/deployed-native/macos/arm/3.9:
  extends: .check/deployed-native/macos/arm
  variables:
     PYENV_VERSION: 3.9.5

check/deployed-native/windows:
  stage: check
  extends:
    - .tags/windows
    - .coverage
    - .rules/deployed-native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=deployed --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE --profile vs2019-release


## native from sources

check/native-from-sources/linux/3.7:
  extends: .check/native-from-sources/linux
  variables:
     PYENV_VERSION: 3.7.10

check/native-from-sources/linux/3.8:
  extends: .check/native-from-sources/linux
  variables:
     PYENV_VERSION: 3.8.10

check/native-from-sources/linux/3.9:
  extends: .check/native-from-sources/linux
  variables:
     PYENV_VERSION: 3.9.5

check/native-from-sources/macos/x86_64/3.7:
  extends: .check/native-from-sources/macos/x86_64
  variables:
     PYENV_VERSION: 3.7.9

check/native-from-sources/macos/x86_64/3.8:
  extends: .check/native-from-sources/macos/x86_64
  variables:
     PYENV_VERSION: 3.8.6

check/native-from-sources/macos/x86_64/3.9:
  extends: .check/native-from-sources/macos/x86_64
  variables:
     PYENV_VERSION: 3.9.0

check/native-from-sources/macos/arm/3.9:
  extends: .check/native-from-sources/macos/arm
  variables:
     PYENV_VERSION: 3.9.5

check/native-from-sources/windows:
  stage: check
  extends:
    - .tags/windows
    - .coverage
    - .rules/native-from-sources
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=same-as-branch --profile vs2019-release

## downstream

check/downstream/linux/3.7:
  extends: .check/downstream/linux
  variables:
     PYENV_VERSION: 3.7.10

check/downstream/linux/3.8:
  extends: .check/downstream/linux
  variables:
     PYENV_VERSION: 3.8.10

check/downstream/linux/3.9:
  extends: .check/downstream/linux
  variables:
     PYENV_VERSION: 3.9.5

check/downstream/macos/x86_64/3.7:
  extends: .check/downstream/macos/x86_64
  variables:
     PYENV_VERSION: 3.7.9

check/downstream/macos/x86_64/3.8:
  extends: .check/downstream/macos/x86_64
  variables:
     PYENV_VERSION: 3.8.6

check/downstream/macos/x86_64/3.9:
  extends: .check/downstream/macos/x86_64
  variables:
     PYENV_VERSION: 3.9.0

check/downstream/macos/arm/3.9:
  extends: .check/downstream/macos/arm
  variables:
     PYENV_VERSION: 3.9.5

check/downstream/windows:
  stage: check
  extends:
    - .tags/windows
    - .before-script/download-artifacts
    - .rules/check/downstream/windows
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=upstream --profile vs2019-release

safety:
  stage: check
  extends:
    - .tags/linux
    - .rules/nightly
  script:
    # ignore coverage package beta release recommendation
    - poetry run safety check -i 41002 --full-report

#####################
# build-wheel stage #
#####################

.rules/build-wheel:
  rules:
    - !reference [.rules/valid-python-release-version, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/deploy-pipeline, rules]

.job/build-wheel:
  stage: build-wheel
  extends:
    - .rules/build-wheel
  script:
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py --isolate-conan-user-home build-wheel --profile $CONAN_PROFILE --version $SDK_PYTHON_RELEASE_VERSION --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE
  artifacts:
    paths:
      - dist

.build-wheel/linux:
  extends:
    - .job/build-wheel
    - .tags/linux
  variables:
    CONAN_PROFILE: linux-release

.build-wheel/macos/x86_64:
  extends:
    - .job/build-wheel
    - .tags/macos/x86_64
  variables:
    CONAN_PROFILE: macos-x86_64-release

.build-wheel/macos/arm:
  extends:
    - .job/build-wheel
    - .tags/macos/arm
  variables:
    CONAN_PROFILE: macos-armv8-release

build-wheel/windows:
  extends:
    - .job/build-wheel
    - .tags/windows
  variables:
    CONAN_PROFILE: vs2019-release

build-wheel/linux/3.7:
  extends: .build-wheel/linux
  variables:
     PYENV_VERSION: 3.7.10

build-wheel/linux/3.8:
  extends: .build-wheel/linux
  variables:
     PYENV_VERSION: 3.8.10

build-wheel/linux/3.9:
  extends: .build-wheel/linux
  variables:
     PYENV_VERSION: 3.9.5

build-wheel/macos/x86_64/3.7:
  extends: .build-wheel/macos/x86_64
  variables:
     PYENV_VERSION: 3.7.9

build-wheel/macos/x86_64/3.8:
  extends: .build-wheel/macos/x86_64
  variables:
     PYENV_VERSION: 3.8.6

build-wheel/macos/x86_64/3.9:
  extends: .build-wheel/macos/x86_64
  variables:
     PYENV_VERSION: 3.9.0

build-wheel/macos/arm/3.9:
  extends: .build-wheel/macos/arm
  variables:
     PYENV_VERSION: 3.9.5

################
# deploy stage #
################

deploy:
  stage: deploy
  extends:
    - .tags/linux
    - .rules/deploy/python
  script:
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py deploy
  release:
    description: sdk-python v$SDK_PYTHON_RELEASE_VERSION
    tag_name: v$SDK_PYTHON_RELEASE_VERSION

pages:
  stage: deploy
  extends:
    - .tags/linux
    - .rules/push-master-or-feat
  needs:
    - check/native-from-sources/linux/3.7
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 7 days
