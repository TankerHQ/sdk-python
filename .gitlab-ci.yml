stages:
  - check
  - deploy

lint:
  tags: [linux]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  stage: check
  script:
    - poetry install --no-root
    - ./lint.sh

.check:
  stage: check
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_MERGE_REQUEST_ID == null && $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"

check/linux:
  extends: .check
  tags: [linux]
  script:
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=same-as-branch --profile gcc8-release
  artifacts:
    paths:
      - coverage
    expire_in: 7 days

check/macos:
  extends: .check
  tags: [macos]
  script:
    - poetry env remove $(which python3) || true
        # poetry runs pip install -e . _without_ the --no-deps and it causes
        # the _next_ build to fail. So always remove the virtualenv before proceeding
        # https://github.com/python-poetry/poetry/issues/2126
        # we need `|| true` because the command will fail if the virtualenv does not exist
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=same-as-branch --profile macos-release

check/windows:
  extends: .check
  tags: [windows]
  script:
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=same-as-branch --profile vs2019-release

.check-deployed:
  stage: check
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true

check/linux/deployed:
  extends: .check-deployed
  tags: [linux]
  script:
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=deployed --profile gcc8-release

check/macos/deployed:
  extends: .check-deployed
  tags: [macos]
  script:
    - poetry env remove $(which python3) || true
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=deployed --profile macos-release

check/windows/deployed:
  extends: .check-deployed
  tags: [windows]
  script:
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=deployed --profile vs2019-release

check/linux/downstream:
  stage: check
  tags:
    - linux
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $UPSTREAM_RUNNER_TAG == "linux"
  script:
    - poetry install --no-root
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=upstream --profile gcc8-release

check/macos/downstream:
  stage: check
  tags:
    - macos
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $UPSTREAM_RUNNER_TAG == "macos"
  script:
    - poetry install --no-root
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=upstream --profile macos-release

check/windows/downstream:
  stage: check
  tags:
    - windows
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $UPSTREAM_RUNNER_TAG == "windows"
  script:
    - poetry install --no-root
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py --isolate-conan-user-home build-and-check --use-tanker=upstream --profile vs2019-release

.deploy:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG
      when: manual

deploy/linux:
  extends: .deploy
  tags: [linux]
  script:
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home deploy --profile gcc8-release

deploy/macos:
  extends: .deploy
  tags: [macos]
  script:
    - poetry env remove $(which python3) || true
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home deploy --profile macos-release

deploy/windows:
  extends: .deploy
  tags: [windows]
  script:
    - poetry install --no-root
    - poetry run python run-ci.py --isolate-conan-user-home deploy --profile vs2019-release

mirror:
  tags:
    - linux
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE != "push"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /\Av[0-9.]+\z/ # public release tags only
    - if: $CI_COMMIT_REF_NAME == "master"
  script:
    - poetry install --no-root
    - poetry run python run-ci.py mirror

pages:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "master"
  needs: ["check/linux"]
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 7 days
  tags:
    - linux

safety:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - poetry env remove $(which python3)
    - poetry install --no-root
    - poetry run safety check --full-report
